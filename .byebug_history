exit
trim = all_posts.flatten(1).reject{|x| x['created_time'].to_i < start_date || x['created_time'].to_i > end_date}exit
trim.length
trim = all_posts.flatten(1).reject{|x| x['created_time'].to_i < start_date || x['created_time'].to_i > end_date}
all_posts.flatten(1).reject{|x| x['created_time'].to_i < start_date || x['created_time'].to_i > end_date}
all_posts.flatten(1).length
exit
all_posts.flatten(1).uniq.length
all_posts.flatten(1).length
all_posts.length
next
exit
all_posts.flatten(1).uniq.count
all_posts.flatten(1).uniq.county
all_posts.flatten(1).uniq
all_posts.flatten(1).length
all_posts.flatten(1)[21]['user']['username']
all_posts.flatten(1)[0]['user']['username']
all_posts.flatten(1)[-1]['user']['username']
next
all_posts.flatten(1)[-1]['user']['username']
next
all_posts.flatten(1)[-1]['user']['username']
next
all_posts.flatten(1)[-1]['user']['username']
exit
posts.parsed_response['data'][0]['created_time']
posts.parsed_response['data'][0]['created_at']
posts.parsed_response['data'][0]
posts.parsed_response['data']
posts.parsed_response.data
posts.parsed_response
posts
posts[0]
posts
exit
JSON.parse(posts.body)['pagination']['next_max_tag_id']
JSON.parse(posts.body)['pagination']
JSON.parse(posts.body)['pagination']['max_tag_id']
JSON.parse(posts.body)['pagination']
JSON.parse(posts.body)
exit
comments['data'].find {|x| x['text'].include?('#'+@hashtag) && x['from']['username'] == post['user']['username']}['created_time']
comments['data'].find {|x| x['text'].include?('#'+@hashtag) && x['from']['username'] == post['user']['username']}
comments['data'].select {|x| x['text'].include?('#'+@hashtag) && x['from']['username'] == post['user']['username']}[0]
comments['data'].select {|x| x['text'].include?('#'+@hashtag) && x['from']['username'] == post['user']['username']}
comments['data'].select {|x| x['text'].include?('#'+@hashtag)}
comments['data']
comments
@hashtag
post
comments['data'].count
comments['data']
comments[:data]
comments.data
comments
exit
HTTParty.get
HTTParty::get
HTTParty::GET
HTTParty::HTTParty
HTTParty.methods
HTTParty.get
HTTParty
httparty
continue
next
!!!
next
exit
comments['data'][0]['from']['username'] == post['user']['username']
comments['data'][0]['from']
comments['data']['from']
comments['data']['from']['username']
comments['data']
comments
comments['data']['user']['username']
comments['data']['from']['username'] == post['user']['username']
comments['data']['text'].include?(post['user']['username'])
comments['data'].count
comments['data']
post['user']['username']
post['user']
post['username']
post.user
post
comments
exit
post['caption']['text'].include?('#'+@hashtag)
post['caption']['text'].include?('##{@hashtag}')
post['caption']['text'].include?('#apitest')
post['caption']['text']
post['caption']
post
exit
done
next
exit
done
next
@parsed_data
exit
@response.each do |x|
@response.each {|x| p 'a' }
@response[0]['user']['username']
response[0]['user']['username']
@response.is_a?(Array)
@response.isA?(Array)
@response.isA(Array)
@response.count
@response.each {|x| p x['user']['username'] }
@response.each {|x| p x['user'] }
@response.each {|x| p x['username'] }
@response.each {|x| p x.username }
@response.each {|x| p x }
@response[0]['user']['username']
@response[0]['user']
@response[0]
@response
exit
@response[0]['type']
@response[0][:type]
@response[0].type
@response[0]
@response
